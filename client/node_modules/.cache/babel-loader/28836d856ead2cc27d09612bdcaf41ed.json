{"ast":null,"code":"// Points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20]\n};\n\n// Infinity Gauntlet Style\nconst style = {\n  0: {\n    color: \"yellow\",\n    size: 15\n  },\n  1: {\n    color: \"gold\",\n    size: 6\n  },\n  2: {\n    color: \"green\",\n    size: 10\n  },\n  3: {\n    color: \"gold\",\n    size: 6\n  },\n  4: {\n    color: \"gold\",\n    size: 6\n  },\n  5: {\n    color: \"purple\",\n    size: 10\n  },\n  6: {\n    color: \"gold\",\n    size: 6\n  },\n  7: {\n    color: \"gold\",\n    size: 6\n  },\n  8: {\n    color: \"gold\",\n    size: 6\n  },\n  9: {\n    color: \"blue\",\n    size: 10\n  },\n  10: {\n    color: \"gold\",\n    size: 6\n  },\n  11: {\n    color: \"gold\",\n    size: 6\n  },\n  12: {\n    color: \"gold\",\n    size: 6\n  },\n  13: {\n    color: \"red\",\n    size: 10\n  },\n  14: {\n    color: \"gold\",\n    size: 6\n  },\n  15: {\n    color: \"gold\",\n    size: 6\n  },\n  16: {\n    color: \"gold\",\n    size: 6\n  },\n  17: {\n    color: \"orange\",\n    size: 10\n  },\n  18: {\n    color: \"gold\",\n    size: 6\n  },\n  19: {\n    color: \"gold\",\n    size: 6\n  },\n  20: {\n    color: \"gold\",\n    size: 6\n  }\n};\n\n// Drawing function\n/*export const drawHand = (predictions, ctx) => {\n  // Check if we have predictions\n  if (predictions.length > 0) {\n    // Loop through each prediction\n    predictions.forEach((prediction) => {\n      // Grab landmarks\n      const landmarks = prediction.landmarks;\n\n      // Loop through fingers\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n        //  Loop through pairs of joints\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          // Get pairs of joints\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n\n          // Draw path\n          ctx.beginPath();\n          ctx.moveTo(\n            landmarks[firstJointIndex][0],\n            landmarks[firstJointIndex][1]\n          );\n          ctx.lineTo(\n            landmarks[secondJointIndex][0],\n            landmarks[secondJointIndex][1]\n          );\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      // Loop through landmarks and draw em\n      for (let i = 0; i < landmarks.length; i++) {\n        // Get x point\n        const x = landmarks[i][0];\n        // Get y point\n        const y = landmarks[i][1];\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\n\n        // Set line color\n        ctx.fillStyle = style[i][\"color\"];\n        ctx.fill();\n      }\n    });\n  }\n};*/\n\nexport const drawHand = (predictions, ctx) => {\n  if (predictions.length > 0) {\n    predictions.forEach(prediction => {\n      const {\n        keypoints\n      } = prediction;\n      for (let i = 0; i < keypoints.length; i += 1) {\n        // Get x point\n        const x = keypoints[i].x;\n        // Get y point\n        const y = keypoints[i].y;\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 3 * Math.PI);\n        // Set line color\n        ctx.fillStyle = \"indigo\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","style","color","size","drawHand","predictions","ctx","length","forEach","prediction","keypoints","i","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"sources":["/Users/alejandro/Desktop/multimedia-mern-app/frontend/src/components/Cam/utilities.js"],"sourcesContent":["// Points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20],\n};\n\n// Infinity Gauntlet Style\nconst style = {\n  0: { color: \"yellow\", size: 15 },\n  1: { color: \"gold\", size: 6 },\n  2: { color: \"green\", size: 10 },\n  3: { color: \"gold\", size: 6 },\n  4: { color: \"gold\", size: 6 },\n  5: { color: \"purple\", size: 10 },\n  6: { color: \"gold\", size: 6 },\n  7: { color: \"gold\", size: 6 },\n  8: { color: \"gold\", size: 6 },\n  9: { color: \"blue\", size: 10 },\n  10: { color: \"gold\", size: 6 },\n  11: { color: \"gold\", size: 6 },\n  12: { color: \"gold\", size: 6 },\n  13: { color: \"red\", size: 10 },\n  14: { color: \"gold\", size: 6 },\n  15: { color: \"gold\", size: 6 },\n  16: { color: \"gold\", size: 6 },\n  17: { color: \"orange\", size: 10 },\n  18: { color: \"gold\", size: 6 },\n  19: { color: \"gold\", size: 6 },\n  20: { color: \"gold\", size: 6 },\n};\n\n// Drawing function\n/*export const drawHand = (predictions, ctx) => {\n  // Check if we have predictions\n  if (predictions.length > 0) {\n    // Loop through each prediction\n    predictions.forEach((prediction) => {\n      // Grab landmarks\n      const landmarks = prediction.landmarks;\n\n      // Loop through fingers\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n        //  Loop through pairs of joints\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          // Get pairs of joints\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n\n          // Draw path\n          ctx.beginPath();\n          ctx.moveTo(\n            landmarks[firstJointIndex][0],\n            landmarks[firstJointIndex][1]\n          );\n          ctx.lineTo(\n            landmarks[secondJointIndex][0],\n            landmarks[secondJointIndex][1]\n          );\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      // Loop through landmarks and draw em\n      for (let i = 0; i < landmarks.length; i++) {\n        // Get x point\n        const x = landmarks[i][0];\n        // Get y point\n        const y = landmarks[i][1];\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\n\n        // Set line color\n        ctx.fillStyle = style[i][\"color\"];\n        ctx.fill();\n      }\n    });\n  }\n};*/\n\nexport const drawHand = (predictions, ctx) => {\n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n      const { keypoints } = prediction;\n      for (let i = 0; i < keypoints.length; i += 1) {\n        // Get x point\n        const x = keypoints[i].x;\n        // Get y point\n        const y = keypoints[i].y;\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 3 * Math.PI);\n        // Set line color\n        ctx.fillStyle = \"indigo\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}