{"ast":null,"code":"import * as handPoseDetection from \"@tensorflow-models/hand-pose-detection\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nconst setHandDetector = async () => {\n  const hands = handPoseDetection.SupportedModels.MediaPipeHands;\n  const detectorConfig = {\n    runtime: \"mediapipe\",\n    solutionPath: \"https://cdn.jsdelivr.net/npm/@mediapipe/hands\",\n    maxHands: 2\n  };\n  return await handPoseDetection.createDetector(hands, detectorConfig);\n};\nconst drawhand = (predictions, ctx) => {\n  if (predictions.length > 0) {\n    predictions.forEach(prediction => {\n      const {\n        keypoints\n      } = prediction;\n      for (let i = 0; i < keypoints.length; i += 1) {\n        // Get x point\n        const x = keypoints[i].x;\n        // Get y point\n        const y = keypoints[i].y;\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 3 * Math.PI);\n        // Set line color\n        ctx.fillStyle = \"indigo\";\n        ctx.fill();\n      }\n    });\n  }\n};\nexport { setHandDetector, drawhand };","map":{"version":3,"names":["handPoseDetection","setHandDetector","hands","SupportedModels","MediaPipeHands","detectorConfig","runtime","solutionPath","maxHands","createDetector","drawhand","predictions","ctx","length","forEach","prediction","keypoints","i","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"sources":["/Users/alejandro/Desktop/multimedia-mern-app/frontend/src/components/Cam/utils.js"],"sourcesContent":["import * as handPoseDetection from \"@tensorflow-models/hand-pose-detection\";\nimport \"@tensorflow/tfjs-core\";\nimport \"@tensorflow/tfjs-backend-webgl\";\n\nconst setHandDetector = async () => {\n  const hands = handPoseDetection.SupportedModels.MediaPipeHands;\n  const detectorConfig = {\n    runtime: \"mediapipe\",\n    solutionPath: \"https://cdn.jsdelivr.net/npm/@mediapipe/hands\",\n    maxHands: 2,\n  };\n  return await handPoseDetection.createDetector(hands, detectorConfig);\n};\n\nconst drawhand = (predictions, ctx) => {\n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n      const { keypoints } = prediction;\n      for (let i = 0; i < keypoints.length; i += 1) {\n        // Get x point\n        const x = keypoints[i].x;\n        // Get y point\n        const y = keypoints[i].y;\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 3 * Math.PI);\n        // Set line color\n        ctx.fillStyle = \"indigo\";\n        ctx.fill();\n      }\n    });\n  }\n};\n\nexport { setHandDetector, drawhand };\n"],"mappings":"AAAA,OAAO,KAAKA,iBAAiB,MAAM,wCAAwC;AAC3E,OAAO,uBAAuB;AAC9B,OAAO,gCAAgC;AAEvC,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,KAAK,GAAGF,iBAAiB,CAACG,eAAe,CAACC,cAAc;EAC9D,MAAMC,cAAc,GAAG;IACrBC,OAAO,EAAE,WAAW;IACpBC,YAAY,EAAE,+CAA+C;IAC7DC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAO,MAAMR,iBAAiB,CAACS,cAAc,CAACP,KAAK,EAAEG,cAAc,CAAC;AACtE,CAAC;AAED,MAAMK,QAAQ,GAAGA,CAACC,WAAW,EAAEC,GAAG,KAAK;EACrC,IAAID,WAAW,CAACE,MAAM,GAAG,CAAC,EAAE;IAC1BF,WAAW,CAACG,OAAO,CAAEC,UAAU,IAAK;MAClC,MAAM;QAAEC;MAAU,CAAC,GAAGD,UAAU;MAChC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACH,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;QAC5C;QACA,MAAMC,CAAC,GAAGF,SAAS,CAACC,CAAC,CAAC,CAACC,CAAC;QACxB;QACA,MAAMC,CAAC,GAAGH,SAAS,CAACC,CAAC,CAAC,CAACE,CAAC;QACxB;QACAP,GAAG,CAACQ,SAAS,CAAC,CAAC;QACfR,GAAG,CAACS,GAAG,CAACH,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGG,IAAI,CAACC,EAAE,CAAC;QAChC;QACAX,GAAG,CAACY,SAAS,GAAG,QAAQ;QACxBZ,GAAG,CAACa,IAAI,CAAC,CAAC;MACZ;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,SAASxB,eAAe,EAAES,QAAQ"},"metadata":{},"sourceType":"module"}